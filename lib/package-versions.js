#! /usr/bin/env node
// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var assertVersionMatch, async, format, fs, getPackageVersions, glob, pkg, semver;
  fs = require('fs');
  pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  glob = require('glob');
  async = require('async');
  semver = require('semver');
  getPackageVersions = function (packagePaths, cb) {
    var unread, version;
    unread = packagePaths.length;
    version = {};
    return packagePaths.forEach(function (path) {
      return fs.readFile(path, 'utf8', function (err, raw) {
        var current, e;
        try {
          current = JSON.parse(raw);
          version[current.name] = current.version;
        } catch (e$) {
          e = e$;
          console.warn('Error parsing ' + path + ': ' + e.stack);
        }
        if (--unread === 0)
          return cb(null, version);
      });
    });
  };
  assertVersionMatch = function (installedVersion, usedVersions, name, versionSpec) {
    var error, help, tagOrBranchName, version;
    if (!semver.validRange(versionSpec)) {
      tagOrBranchName = versionSpec.replace(/^.*\#v/, '');
      if (semver.validRange(tagOrBranchName)) {
        versionSpec = tagOrBranchName;
      } else {
        help = 'Missing "' + name + '" version in "' + versionSpec + '"\nPlease name and push your git tags/branches "v<package.json version>".\n\nThis way, starting your server and ensuring your npm modules are up to\ndate happens in ~10ms, with no network roundtrips -- instead of adding\nmulti-second delays for every git url dependency in package.json';
        error = new Error(help);
        error.fatal = true;
        throw error;
      }
    }
    version = installedVersion[name];
    if (!(null != version))
      throw new Error('' + name + ' is not installed');
    if (semver.satisfies(version, versionSpec)) {
      return usedVersions[name] = version;
    } else {
      throw new Error('' + name + ' version ' + version + " doesn't satisfy " + versionSpec);
    }
  };
  format = function () {
    var cuddle, leadOp, tailOp;
    tailOp = /\ ?([\[\{,])\n ( *)(?: )/gm;
    leadOp = '\n$2$1 ';
    cuddle = /(^|[\[\{,] ?)\n */gm;
    return function (json) {
      return JSON.stringify(json, null, 2).replace(tailOp, leadOp).replace(cuddle, '$1');
    };
  }();
  getPackageVersions(glob.sync('node_modules/*/package.json'), function (e, allVersions) {
    var assertFreshness, error, exitCode, name, used, ver;
    used = {};
    exitCode = 0;
    try {
      assertFreshness = assertVersionMatch.bind(this, allVersions, used);
      for (name in null != pkg.dependencies ? pkg.dependencies : {}) {
        ver = (null != pkg.dependencies ? pkg.dependencies : {})[name];
        assertFreshness(name, ver);
      }
      for (name in null != pkg.devDependencies ? pkg.devDependencies : {}) {
        ver = (null != pkg.devDependencies ? pkg.devDependencies : {})[name];
        assertFreshness(name, ver);
      }
      if (process.argv.indexOf('--dump') >= 0)
        console.log(format(used));
    } catch (e$) {
      error = e$;
      console.error(error.message);
      exitCode = 1;
      if (error.fatal)
        exitCode = 2;
    }
    return process.exit(exitCode);
  });
}.call(this);
